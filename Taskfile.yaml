---
version: 3
vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi

dotenv: ['.env', '{{.HOME}}/.env']

tasks:
  test-vm:
    desc: Test vm module
    cmds:
      - |
        echo "Running bake command for vm module - apply terraform code"
        rm -rf {{ .EXPORTED_TF_WORKSPACE }} || true
        dagger call -m {{ .MODULE }} {{ .FUNCTION }} \
        --terraform-dir {{ .TF_CODE_TEST_DIR }} \
        --encrypted-file {{ .SOPS_ENCRYPTED_VARS }} \
        --operation apply \
        --sops-key={{ .SOPS_KEY }} \
        -vv --progress plain \
        export --path={{ .EXPORTED_TF_WORKSPACE }}
      - |
        echo "Running bake command for vm module - apply terraform code over existing workspace"
        dagger call -m {{ .MODULE }} {{ .FUNCTION }} \
        --terraform-dir {{ .EXPORTED_TF_WORKSPACE }} \
        --encrypted-file {{ .SOPS_ENCRYPTED_VARS }} \
        --operation apply \
        --sops-key={{ .SOPS_KEY }} \
        -vv --progress plain \
        export --path={{ .EXPORTED_TF_WORKSPACE }}
    vars:
      MODULE: vm
      FUNCTION: bake
      TF_CODE_TEST_DIR: tests/vm/tf
      SOPS_ENCRYPTED_VARS: tests/vm/terraform.tfvars.enc.json
      EXPORTED_TF_WORKSPACE: /tmp/terraform/vms/dagger/
      SOPS_KEY: env:SOPS_AGE_KEY

  create:
    desc: Create new dagger module
    cmds:
      - dagger init --sdk={{ .SDK }} --source=./{{ .MODULE_NAME }} --name={{ .MODULE_NAME }}
      - jq '.source = "."' dagger.json > tmp.json && mv tmp.json dagger.json
      - mv dagger.json ./{{ .MODULE_NAME }}/dagger.json
    vars:
      MODULE_NAME:
        sh: gum input --placeholder "Module name"
      SDK:
        sh: gum choose "go" "python"

  do:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' Taskfile.yaml | sed 's/^- //' | gum choose)
        task ${task}

  check:
    desc: "Run pre-commit hooks"
    cmds:
      - pre-commit run -a

  switch-remote:
    desc: Switch to remote branch
    cmds:
      - |
        git fetch
        branches=($(git branch -r | grep -v 'origin/HEAD' | sed 's|origin/||'))
        branch=$(printf "%s\n" "${branches[@]}" | gum choose)
        git switch -c ${branch} --track origin/${branch}
        git branch && git status

  switch-local:
    desc: Switch to local branch
    cmds:
      - |
        branches=$(git branch -a | grep -v 'remotes')
        branch=$(printf "%s\n" "${branches[@]}" | gum choose)
        git checkout ${branch} && git pull

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  commit:
    desc: Commit + push code into branch
    deps: [check]
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "committing changes"
          echo "ENTER COMMIT MESSAGE"
          COMMIT_MESSAGE=$(echo $(gum choose "feat: {{ .BRANCH }}" "fix: {{ .BRANCH }}" "BREAKING CHANGE: {{ .BRANCH }}" "ENTER CUSTOM COMMIT MESSAGE"))

          if [ "$COMMIT_MESSAGE" == "ENTER CUSTOM COMMIT MESSAGE" ]; then
            COMMIT_MESSAGE=$(echo $(gum input --placeholder "scope" --value "commit to {{ .BRANCH }}"))
          fi

          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "no changes"
        fi
        git push origin -u {{ .BRANCH }}

  pr:
    desc: Create pull request into main
    # deps: [lint]
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 20s
      #- gh pr checks $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull

  release:
    desc: push new version
    cmds:
      - task: test-vm
      - task: pr
      - npx semantic-release --dry-run
      - npx semantic-release --debug --no-ci
      - echo released version $(git describe --tags --abbrev=0)
# check: https://github.com/act3-ai/dagger/blob/main/release/main.go
